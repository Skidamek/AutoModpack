plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

jar.enabled = false

archivesBaseName = rootProject.archives_base_name + "-" + project.name
version = rootProject.mod_version
group = rootProject.maven_group

repositories {
    mavenCentral()
    maven { url 'https://api.modrinth.com/maven' }

    maven { url "https://maven.fabricmc.net/" }
    maven { url "https://maven.quiltmc.org/repository/release" }
    maven { url "https://files.minecraftforge.net/maven/" }
    maven { url "https://libraries.minecraft.net/" }
}

dependencies {
    implementation project(path: ':common')
    implementation project(path: ':core-common')

    // our needed dependencies
    compileOnly "maven.modrinth:preloading-tricks:0.0.14"
    compileOnly "com.google.code.gson:gson:2.10.1"
    compileOnly "org.apache.logging.log4j:log4j-core:2.20.0"

    // loaders apis
    if (project.name.contains('quilt')) {
        compileOnly("org.quiltmc:quilt-loader:0.20.2") {
            transitive = false
        }
    } else {
        if (project.name.contains('forge')) {
            compileOnly("net.minecraftforge:fmlcore:1.20.1-47.1.3")
            compileOnly("net.minecraftforge:fmlloader:1.20.1-47.1.3")
        }

        compileOnly("net.fabricmc:fabric-loader:0.14.22") {
            transitive = false
        }
    }
}

shadowJar {
    // Set normal name
    archiveClassifier.set('')

    // Only include the output classes from modules
    from project(':core-common').sourceSets.main.output
    from project(':common').sourceSets.main.output

    // Exclude original classes
    exclude('pl/skidam/automodpack_core/loader/LoaderManager.class')
    exclude('pl/skidam/automodpack_core/mods/SetupMods.class')

    if (project.name.contains("fabric")) {
        // Define relocation mapping for fabric project
        relocate('pl.skidam.automodpack_core_fabric', 'pl.skidam.automodpack_core')
    } else if (project.name.contains("forge")) {
        // Define relocation mapping for forge project
        relocate('pl.skidam.automodpack_core_forge', 'pl.skidam.automodpack_core')
    } else if (project.name.contains("quilt")) {
        // Define relocation mapping for quilt project
        relocate('pl.skidam.automodpack_core_quilt', 'pl.skidam.automodpack_core')
    }

    // Exclude other dependencies that might have been bundled
    configurations = []

    if (project.name.contains('forge')) {
        manifest {
            attributes(
                    "FMLModType": "LIBRARY" // needed to load early
            )
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
    withSourcesJar()
}

assemble.dependsOn shadowJar
